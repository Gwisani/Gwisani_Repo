@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Power on/off</h1>

    <input type="checkbox" id="powerCheckbox" class="checkbox">
    <label for="powerCheckbox"class="powerbutton"><p>OFF       ON</p></label>
    
</div>

<div class="text-center">
    <div class="button-container">
        <button id="PC1Button" class="btn btn-primary">Pull Code 1</button>
        <button id="PC2Button" class="btn btn-primary">Pull Code 2</button>
    </div>
</div>

<div class="text-center">
    <img id="rotatingImage" src="images/fan.png" alt="Image" class="image-below-label rotate linear infinite">
</div>

<div class="text-center">
    <label id="speedLabel" style="background: rgb(255, 140, 26); color: rgb(255, 255, 255);">Off</label>
</div>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

<script>
    $(document).ready(function () {
        // Get references to the checkbox and image
        const powerCheckbox = $('#powerCheckbox');
        const rotatingImage = $('#rotatingImage');

        // Initialize rotation based on the default checkbox state
        if (powerCheckbox.prop('checked')) {
            rotatingImage.css('animation-play-state', 'running'); // Start the rotation animation
        } else {
            rotatingImage.css('animation-play-state', 'paused'); // Pause the rotation animation
        }

        // Add a change event listener to the checkbox using jQuery
        powerCheckbox.on('change', function () {
            // Call the JavaScript function for handling the checkbox change
            handlePowerCheckboxChange(powerCheckbox.prop('checked'), function (result) {
                var speedLabel;
                if (powerCheckbox.prop('checked')) {
                    if (result && result.length > 0) {
                        switch (result[0].lastFanSpeed) {
                        case 'S1':
                                rotatingImage.css('animation-duration', '2.25s');
                                // Update the speedLabel element
                                speedLabel = $('#speedLabel');
                                if (speedLabel.length) {
                                    speedLabel.text('Low')
                                        .css('background', 'rgb(255, 140, 26)')
                                        .css('color', 'rgb(255, 255, 255)');
                                }
                            break;
                        case 'S2':
                                rotatingImage.css('animation-duration', '1.5s');
                                // Update the speedLabel element
                                speedLabel = $('#speedLabel');
                                if (speedLabel.length) {
                                    speedLabel.text('Medium')
                                        .css('background', 'rgb(255, 140, 26)')
                                        .css('color', 'rgb(255, 255, 255)');
                                }
                            break;
                        case 'S3':
                                rotatingImage.css('animation-duration', '0.5s');
                                // Update the speedLabel element
                                speedLabel = $('#speedLabel');
                                if (speedLabel.length) {
                                    speedLabel.text('High')
                                        .css('background', 'rgb(255, 140, 26)')
                                        .css('color', 'rgb(255, 255, 255)');
                                }
                            break;
                        default:
                            // Handle the case when lastFanSpeed doesn't match any of the above cases
                        }
                        rotatingImage.css('animation-play-state', 'running'); // Start the rotation animation
                    } else {
                        rotatingImage.css('animation-play-state', 'paused'); // Pause the rotation animation
                        // Update the speedLabel element
                        speedLabel = $('#speedLabel');
                        if (speedLabel.length) {
                            speedLabel.text('Off')
                                .css('background', 'rgb(255, 140, 26)')
                                .css('color', 'rgb(255, 255, 255)');
                        }
                    }
                    
                } else {
                    rotatingImage.css('animation-play-state', 'paused'); // Pause the rotation animation
                    // Update the speedLabel element
                    speedLabel = $('#speedLabel');
                    if (speedLabel.length) {
                        speedLabel.text('Off')
                            .css('background', 'rgb(255, 140, 26)')
                            .css('color', 'rgb(255, 255, 255)');
                    }
                }
            });
        });

        function handlePowerCheckboxChange(isChecked, callback) {

            data = JSON.stringify({ isChecked: JSON.stringify(isChecked) });

            $.ajax({
                type: "GET",
                url: "Index?handler=OnPowerCheckboxChanged", // Replace with the appropriate URL
                data: { "isChecked": isChecked },
                contentType: "application/json",
                success: function (result) {
                    // Pass the JSON result received from the server
                    callback(result);
                },
                error: function () {
                    console.log("Failed to invoke C# method");
                }
            });
        }
    });
</script>
